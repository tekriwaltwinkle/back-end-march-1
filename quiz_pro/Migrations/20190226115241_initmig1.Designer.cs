// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using quiz_pro.Models;

namespace quiz_pro.Migrations
{
    [DbContext(typeof(dbContext))]
    [Migration("20190226115241_initmig1")]
    partial class initmig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("quiz_pro.Models.admin", b =>
                {
                    b.Property<int>("aID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("password");

                    b.Property<string>("username");

                    b.HasKey("aID");

                    b.ToTable("admins");
                });

            modelBuilder.Entity("quiz_pro.Models.question", b =>
                {
                    b.Property<int>("quID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer1");

                    b.Property<string>("Answer2");

                    b.Property<string>("Answer3");

                    b.Property<string>("CorrectAnswer");

                    b.Property<string>("Text");

                    b.Property<int>("qID");

                    b.HasKey("quID");

                    b.HasIndex("qID");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("quiz_pro.Models.quiz", b =>
                {
                    b.Property<int>("qID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title");

                    b.Property<int>("aID");

                    b.HasKey("qID");

                    b.ToTable("quizs");
                });

            modelBuilder.Entity("quiz_pro.Models.score", b =>
                {
                    b.Property<int>("scoreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("date");

                    b.Property<int>("marks");

                    b.Property<int>("qID");

                    b.Property<string>("title");

                    b.Property<int>("uID");

                    b.Property<string>("username");

                    b.HasKey("scoreId");

                    b.HasIndex("qID");

                    b.HasIndex("uID");

                    b.ToTable("scores");
                });

            modelBuilder.Entity("quiz_pro.Models.user", b =>
                {
                    b.Property<int>("uID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email");

                    b.Property<string>("password");

                    b.Property<string>("phonenumber");

                    b.Property<string>("username");

                    b.HasKey("uID");

                    b.ToTable("users");
                });

            modelBuilder.Entity("quiz_pro.Models.question", b =>
                {
                    b.HasOne("quiz_pro.Models.quiz", "quiz")
                        .WithMany()
                        .HasForeignKey("qID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("quiz_pro.Models.score", b =>
                {
                    b.HasOne("quiz_pro.Models.quiz", "quiz")
                        .WithMany()
                        .HasForeignKey("qID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("quiz_pro.Models.user", "user")
                        .WithMany()
                        .HasForeignKey("uID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
